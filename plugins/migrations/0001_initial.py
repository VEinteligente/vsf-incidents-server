# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2017-10-03 12:57
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('event', '0001_initial'),
        ('measurement', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DailyTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('ndt_measurement_count', models.PositiveIntegerField(default=0)),
                ('av_upload_speed', models.FloatField(default=0)),
                ('av_download_speed', models.FloatField(default=0)),
                ('av_ping', models.FloatField(default=0)),
                ('av_max_ping', models.FloatField(default=0)),
                ('av_min_ping', models.FloatField(default=0)),
                ('av_timeout', models.FloatField(default=0)),
                ('av_package_loss', models.FloatField(default=0)),
                ('isp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='event.ISP')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='event.Plan')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='event.State')),
            ],
        ),
        migrations.CreateModel(
            name='DNS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('control_resolver_failure', models.CharField(blank=True, max_length=50, null=True)),
                ('control_resolver_answers', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('control_resolver_resolver_hostname', models.GenericIPAddressField(blank=True, null=True)),
                ('failure', models.CharField(blank=True, max_length=50, null=True)),
                ('answers', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('resolver_hostname', models.GenericIPAddressField(blank=True, null=True)),
                ('inconsistent', models.NullBooleanField()),
                ('dns_consistency', models.CharField(blank=True, max_length=50, null=True)),
                ('flag', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dnss', to='measurement.Flag')),
                ('metric', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dnss', to='measurement.Metric')),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='event.Target')),
            ],
        ),
        migrations.CreateModel(
            name='HTTP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_code_match', models.BooleanField(default=False)),
                ('headers_match', models.BooleanField(default=False)),
                ('body_length_match', models.BooleanField(default=False)),
                ('body_proportion', models.FloatField()),
                ('flag', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='https', to='measurement.Flag')),
                ('metric', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='https', to='measurement.Metric')),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='event.Target')),
            ],
        ),
        migrations.CreateModel(
            name='NDT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('upload_speed', models.FloatField()),
                ('download_speed', models.FloatField()),
                ('ping', models.FloatField()),
                ('max_ping', models.FloatField()),
                ('min_ping', models.FloatField()),
                ('timeout', models.FloatField()),
                ('package_loss', models.FloatField()),
                ('daily_test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='measurement', to='plugins.DailyTest')),
                ('flag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ndts', to='measurement.Flag')),
                ('isp', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='event.ISP')),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ndts', to='measurement.Metric')),
            ],
        ),
        migrations.CreateModel(
            name='TCP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_blocked', models.BooleanField(default=False)),
                ('status_failure', models.TextField(null=True)),
                ('status_success', models.BooleanField(default=True)),
                ('flag', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tcps', to='measurement.Flag')),
                ('metric', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tcps', to='measurement.Metric')),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='event.Target')),
            ],
        ),
    ]
